{"version":3,"file":"persist.js","sources":["../src/persist.ts"],"sourcesContent":["import { Store, StoreEvent, Action } from \"./store\";\n\nexport interface Options<S> {\n  // name sets the state key to use, useful in development to avoid conflict\n  // with other apps. Default is to use the app location hostname\n  name: string\n  // filter predicate allows control over whether to persist state based on \n  // the action. Default is to trigger persistence after all actions\n  filter: (action: Action) => boolean\n  // persist allows transforming the state to only persist part of it.\n  // Default is to persist complete state\n  persist: (state: S) => Partial<S>\n  // delay introduces a delay before the save is performed. If another persist\n  // is triggered before it expires, the previous persist is cancelled and a\n  // new one scheduled. This can save doing too many persist operations by\n  // debouncing the triggering. Default is 0 delay\n  delay: number\n  // TODO: version for updates, expiry etc...\n}\n\n// TODO: make storage plugable (localStorage, indexedDB etc...)\n// TODO: plugin storage could be wrapped with lz-string for compression\n//       or provide hooks to transform (before save / after load)\n// TODO: provide methods to purge, clear, flush etc... (state / actions?)\n\nexport function persist<S>(store: Store<S>, options: Partial<Options<S>>) {\n  const opt = {\n    name: location.hostname,\n    filter: (_action: Action) => true,\n    persist: (state: S) => state,\n    delay: 0,\n    ...options\n  }\n\n  const state = localStorage.getItem(opt.name)\n  if (state) {\n    store.state = { ...store.state, ...JSON.parse(state) }\n  }\n\n  let task = 0\n\n  store.addEventListener('state', e => {\n    const ev = <CustomEvent<StoreEvent>>e\n    const { action } = ev.detail\n\n    if (opt.filter(action)) {\n      if (task) {\n        window.clearTimeout(task)\n      }\n      task = window.setTimeout(() => {\n        localStorage.setItem(opt.name, JSON.stringify(opt.persist(store.state)))\n        task = 0\n      }, opt.delay)\n    }\n  })\n\n  return store\n}\n"],"names":["persist","store","options","opt","name","location","hostname","filter","_action","state","delay","localStorage","getItem","JSON","parse","task","addEventListener","e","ev","action","detail","window","clearTimeout","setTimeout","setItem","stringify"],"mappings":"SAyBgBA,EAAWC,EAAiBC,GAC1C,MAAMC,EAAM,CACVC,KAAMC,SAASC,SACfC,OAASC,IAAoB,EAC7BR,QAAUS,GAAaA,EACvBC,MAAO,KACJR,GAGCO,EAAQE,aAAaC,QAAQT,EAAIC,MACnCK,IACFR,EAAMQ,MAAQ,IAAKR,EAAMQ,SAAUI,KAAKC,MAAML,KAGhD,IAAIM,EAAO,EAiBX,OAfAd,EAAMe,iBAAiB,QAASC,IAC9B,MAAMC,EAA8BD,GAC9BE,OAAEA,GAAWD,EAAGE,OAElBjB,EAAII,OAAOY,KACTJ,GACFM,OAAOC,aAAaP,GAEtBA,EAAOM,OAAOE,WAAW,KACvBZ,aAAaa,QAAQrB,EAAIC,KAAMS,KAAKY,UAAUtB,EAAIH,QAAQC,EAAMQ,SAChEM,EAAO,GACNZ,EAAIO,UAIJT"}