{"version":3,"file":"connect.js","sources":["../src/connect.ts"],"sourcesContent":["import { Action, Store } from './store'\n\nexport type DispatchMap = { [key: string]: (event: Event) => void }\n\nexport interface ConnectProps {\n  mapState?(state: any): { [key: string]: any }\n}\n\nexport interface ConnectEvents {\n  mapEvents?(): { [key: string]: (event: Event) => Action }\n}\n\nexport interface Connectable extends HTMLElement, ConnectProps, ConnectEvents {\n  connectedCallback?(): void\n  disconnectedCallback?(): void\n}\n\nexport type Constructor<T> = new (...args: any[]) => T\n\nconst dispatchMap: unique symbol = Symbol()\nconst createDispatchMap: unique symbol = Symbol()\nconst addEventListeners: unique symbol = Symbol()\nconst removeEventListeners: unique symbol = Symbol()\nconst addStateSubscription: unique symbol = Symbol()\nconst removeStateSubscription: unique symbol = Symbol()\nconst onStateChange: unique symbol = Symbol()\n\nexport function connect<T extends Constructor<Connectable>, S>(\n  store: Store<S>,\n  superclass: T\n) {\n  class connected extends superclass {\n    private [dispatchMap]: DispatchMap\n\n    constructor(...args: any[]) {\n      super(...args)\n      this[onStateChange] = this[onStateChange].bind(this)\n      this[createDispatchMap]()\n    }\n\n    connectedCallback() {\n      // this minifies better\n      let callback = super.connectedCallback\n      callback && callback()\n      \n      // super.connectedCallback && super.connectedCallback()\n\n      this[addEventListeners]()\n      this[addStateSubscription]()\n    }\n\n    disconnectedCallback() {\n      this[removeStateSubscription]()\n      this[removeEventListeners]()\n\n      // this minifies better\n      let callback = super.disconnectedCallback\n      callback && callback()\n\n      // super.disconnectedCallback && super.disconnectedCallback()\n    }\n\n    private [createDispatchMap]() {\n      this[dispatchMap] = <DispatchMap>{}\n      if (this.mapEvents) {\n        const eventMap = this.mapEvents()\n        for (const key in eventMap) {\n          const fn = eventMap[key]\n          this[dispatchMap][key] = function (event: Event) {\n            event.stopImmediatePropagation()\n            store.dispatch(fn(event))\n          }.bind(this)\n        }\n      }\n    }\n\n    private [addEventListeners]() {\n      for (const key in this[dispatchMap]) {\n        this.addEventListener(key, this[dispatchMap][key], false)\n      }\n    }\n\n    private [removeEventListeners]() {\n      for (const key in this[dispatchMap]) {\n        this.removeEventListener(key, this[dispatchMap][key], false)\n      }\n    }\n\n    private [addStateSubscription]() {\n      store.addEventListener('state', this[onStateChange])\n      this[onStateChange]()\n    }\n\n    private [removeStateSubscription]() {\n      this.removeEventListener('state', this[onStateChange])\n    }\n\n    private [onStateChange]() {\n      this.mapState && Object.assign(this, this.mapState(store.state))\n    }\n  }\n\n  return connected as Constructor<Connectable> & T\n}"],"names":["dispatchMap","Symbol","createDispatchMap","addEventListeners","removeEventListeners","addStateSubscription","removeStateSubscription","onStateChange","connect","store","superclass","[object Object]","args","super","this","bind","callback","connectedCallback","disconnectedCallback","mapEvents","eventMap","key","fn","event","stopImmediatePropagation","dispatch","addEventListener","removeEventListener","mapState","Object","assign","state"],"mappings":"AAmBA,MAAMA,EAA6BC,SAC7BC,EAAmCD,SACnCE,EAAmCF,SACnCG,EAAsCH,SACtCI,EAAsCJ,SACtCK,EAAyCL,SACzCM,EAA+BN,kBAErBO,EACdC,EACAC,GAyEA,OAvEA,cAAwBA,EAGtBC,eAAeC,GACbC,SAASD,GACTE,KAAKP,GAAiBO,KAAKP,GAAeQ,KAAKD,MAC/CA,KAAKZ,KAGPS,oBAEE,IAAIK,EAAWH,MAAMI,kBACrBD,GAAYA,IAIZF,KAAKX,KACLW,KAAKT,KAGPM,uBACEG,KAAKR,KACLQ,KAAKV,KAGL,IAAIY,EAAWH,MAAMK,qBACrBF,GAAYA,IAKNL,CAACT,KAEP,GADAY,KAAKd,GAA4B,GAC7Bc,KAAKK,UAAW,CAClB,MAAMC,EAAWN,KAAKK,YACtB,IAAK,MAAME,KAAOD,EAAU,CAC1B,MAAME,EAAKF,EAASC,GACpBP,KAAKd,GAAaqB,GAAO,SAAUE,GACjCA,EAAMC,2BACNf,EAAMgB,SAASH,EAAGC,KAClBR,KAAKD,QAKLH,CAACR,KACP,IAAK,MAAMkB,KAAOP,KAAKd,GACrBc,KAAKY,iBAAiBL,EAAKP,KAAKd,GAAaqB,IAAM,GAI/CV,CAACP,KACP,IAAK,MAAMiB,KAAOP,KAAKd,GACrBc,KAAKa,oBAAoBN,EAAKP,KAAKd,GAAaqB,IAAM,GAIlDV,CAACN,KACPI,EAAMiB,iBAAiB,QAASZ,KAAKP,IACrCO,KAAKP,KAGCI,CAACL,KACPQ,KAAKa,oBAAoB,QAASb,KAAKP,IAGjCI,CAACJ,KACPO,KAAKc,UAAYC,OAAOC,OAAOhB,KAAMA,KAAKc,SAASnB,EAAMsB"}