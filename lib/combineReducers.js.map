{"version":3,"file":"combineReducers.js","sources":["../src/combineReducers.ts"],"sourcesContent":["import { Action, Reducer } from './store'\n\nexport type Reducers = { [key: string]: Reducer }\n\nexport type ReducerState<R extends Reducer> = R extends Reducer<infer S> ? S : never\n\nexport type State<R extends Reducers> = {\n  [K in keyof R]: ReducerState<R[K]>\n}\n\nexport function combineReducers<R extends Reducers>(reducers: R): Reducer<State<R>> {\n  return (state: State<R> = {} as State<R>, action: Action) => {\n    for (const key in reducers) {\n      state[key] = reducers[key](state[key], action)\n    }\n    return state\n  }\n}"],"names":["combineReducers","reducers","state","action","key"],"mappings":"SAUgBA,EAAoCC,GAClD,MAAO,CAACC,EAAkB,GAAgBC,KACxC,IAAK,MAAMC,KAAOH,EAChBC,EAAME,GAAOH,EAASG,GAAKF,EAAME,GAAMD,GAEzC,OAAOD"}