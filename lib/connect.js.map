{"version":3,"file":"connect.js","sources":["../src/connect.ts"],"sourcesContent":["import { Action, Store } from './store'\nimport { stateEvent } from 'const'\n\nexport type DispatchMap = { [key: string]: (event: Event) => void }\n\nexport interface ConnectProps {\n  mapState?(state: any): { [key: string]: any }\n}\n\nexport interface ConnectEvents {\n  mapEvents?(): { [key: string]: (event: Event) => Action }\n}\n\nexport interface Connectable extends HTMLElement, ConnectProps, ConnectEvents {\n  connectedCallback?(): void\n  disconnectedCallback?(): void\n}\n\nexport type Constructor<T> = new (...args: any[]) => T\n\nconst dispatchMap: unique symbol = Symbol()\nconst createDispatchMap: unique symbol = Symbol()\nconst addEventListeners: unique symbol = Symbol()\nconst removeEventListeners: unique symbol = Symbol()\nconst addStateSubscription: unique symbol = Symbol()\nconst removeStateSubscription: unique symbol = Symbol()\nconst onStateChange: unique symbol = Symbol()\n\nexport function connect<T extends Constructor<Connectable>, S>(\n  store: Store<S>,\n  superclass: T\n) {\n  class connected extends superclass {\n    private [dispatchMap]: DispatchMap\n\n    constructor(...args: any[]) {\n      super(...args)\n      this[onStateChange] = this[onStateChange].bind(this)\n      this[createDispatchMap]()\n    }\n\n    connectedCallback() {\n      super.connectedCallback && super.connectedCallback()\n\n      this[addEventListeners]()\n      this[addStateSubscription]()\n    }\n\n    disconnectedCallback() {\n      this[removeStateSubscription]()\n      this[removeEventListeners]()\n\n      super.disconnectedCallback && super.disconnectedCallback()\n    }\n\n    private [createDispatchMap]() {\n      this[dispatchMap] = <DispatchMap>{}\n      if (this.mapEvents) {\n        const eventMap = this.mapEvents()\n        for (const key in eventMap) {\n          const fn = eventMap[key]\n          this[dispatchMap][key] = function (event: Event) {\n            // TODO: add options to mixin to control\n            // event.stopImmediatePropagation()\n            store.dispatch(fn(event))\n          }.bind(this)\n        }\n      }\n    }\n\n    private [addEventListeners]() {\n      for (const key in this[dispatchMap]) {\n        this.addEventListener(key, this[dispatchMap][key], false)\n      }\n    }\n\n    private [removeEventListeners]() {\n      for (const key in this[dispatchMap]) {\n        this.removeEventListener(key, this[dispatchMap][key], false)\n      }\n    }\n\n    private [addStateSubscription]() {\n      store.addEventListener(stateEvent, this[onStateChange])\n      this[onStateChange]()\n    }\n\n    private [removeStateSubscription]() {\n      this.removeEventListener(stateEvent, this[onStateChange])\n    }\n\n    private [onStateChange]() {\n      this.mapState && Object.assign(this, this.mapState(store.state))\n    }\n  }\n\n  return connected as Constructor<Connectable> & T\n}"],"names":["dispatchMap","Symbol","createDispatchMap","addEventListeners","removeEventListeners","addStateSubscription","removeStateSubscription","onStateChange","connect","store","superclass","[object Object]","args","super","this","bind","connectedCallback","disconnectedCallback","mapEvents","eventMap","key","fn","event","dispatch","addEventListener","removeEventListener","stateEvent","mapState","Object","assign","state"],"mappings":"wCAoBA,MAAMA,EAA6BC,SAC7BC,EAAmCD,SACnCE,EAAmCF,SACnCG,EAAsCH,SACtCI,EAAsCJ,SACtCK,EAAyCL,SACzCM,EAA+BN,kBAErBO,EACdC,EACAC,GAkEA,OAhEA,cAAwBA,EAGtBC,eAAeC,GACbC,SAASD,GACTE,KAAKP,GAAiBO,KAAKP,GAAeQ,KAAKD,MAC/CA,KAAKZ,KAGPS,oBACEE,MAAMG,mBAAqBH,MAAMG,oBAEjCF,KAAKX,KACLW,KAAKT,KAGPM,uBACEG,KAAKR,KACLQ,KAAKV,KAELS,MAAMI,sBAAwBJ,MAAMI,uBAG9BN,CAACT,KAEP,GADAY,KAAKd,GAA4B,GAC7Bc,KAAKI,UAAW,CAClB,MAAMC,EAAWL,KAAKI,YACtB,IAAK,MAAME,KAAOD,EAAU,CAC1B,MAAME,EAAKF,EAASC,GACpBN,KAAKd,GAAaoB,GAAO,SAAUE,GAGjCb,EAAMc,SAASF,EAAGC,KAClBP,KAAKD,QAKLH,CAACR,KACP,IAAK,MAAMiB,KAAON,KAAKd,GACrBc,KAAKU,iBAAiBJ,EAAKN,KAAKd,GAAaoB,IAAM,GAI/CT,CAACP,KACP,IAAK,MAAMgB,KAAON,KAAKd,GACrBc,KAAKW,oBAAoBL,EAAKN,KAAKd,GAAaoB,IAAM,GAIlDT,CAACN,KACPI,EAAMe,iBAAiBE,EAAYZ,KAAKP,IACxCO,KAAKP,KAGCI,CAACL,KACPQ,KAAKW,oBAAoBC,EAAYZ,KAAKP,IAGpCI,CAACJ,KACPO,KAAKa,UAAYC,OAAOC,OAAOf,KAAMA,KAAKa,SAASlB,EAAMqB"}